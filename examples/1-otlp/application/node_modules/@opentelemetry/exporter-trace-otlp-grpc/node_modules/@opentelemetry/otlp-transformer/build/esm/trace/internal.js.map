{"version":3,"file":"internal.js","sourceRoot":"","sources":["../../../src/trace/internal.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { Link } from '@opentelemetry/api';\nimport { hrTimeToNanoseconds } from '@opentelemetry/core';\nimport type { ReadableSpan, TimedEvent } from '@opentelemetry/sdk-trace-base';\nimport { toAttributes } from '../common/internal';\nimport { EStatusCode, IEvent, ILink, ISpan } from './types';\nimport * as core from '@opentelemetry/core';\n\nexport function sdkSpanToOtlpSpan(\n  span: ReadableSpan,\n  useHex?: boolean\n): ISpan {\n  const ctx = span.spanContext();\n  const status = span.status;\n  const parentSpanId = useHex? span.parentSpanId : span.parentSpanId != null? core.hexToBase64(span.parentSpanId): undefined;\n  return {\n    traceId: useHex? ctx.traceId : core.hexToBase64(ctx.traceId),\n    spanId: useHex? ctx.spanId : core.hexToBase64(ctx.spanId),\n    parentSpanId: parentSpanId,\n    name: span.name,\n    // Span kind is offset by 1 because the API does not define a value for unset\n    kind: span.kind == null ? 0 : span.kind + 1,\n    startTimeUnixNano: hrTimeToNanoseconds(span.startTime),\n    endTimeUnixNano: hrTimeToNanoseconds(span.endTime),\n    attributes: toAttributes(span.attributes),\n    droppedAttributesCount: 0,\n    events: span.events.map(toOtlpSpanEvent),\n    droppedEventsCount: 0,\n    status: {\n      // API and proto enums share the same values\n      code: status.code as unknown as EStatusCode,\n      message: status.message,\n    },\n    links: span.links.map(link => toOtlpLink(link, useHex)),\n    droppedLinksCount: 0,\n  };\n}\n\nexport function toOtlpLink(link: Link, useHex?: boolean): ILink {\n  return {\n    attributes: link.attributes ? toAttributes(link.attributes) : [],\n    spanId: useHex? link.context.spanId : core.hexToBase64(link.context.spanId),\n    traceId: useHex? link.context.traceId : core.hexToBase64(link.context.traceId),\n    droppedAttributesCount: 0,\n  };\n}\n\nexport function toOtlpSpanEvent(\n  timedEvent: TimedEvent\n): IEvent {\n  return {\n    attributes: timedEvent.attributes ? toAttributes(timedEvent.attributes) : [],\n    name: timedEvent.name,\n    timeUnixNano: hrTimeToNanoseconds(timedEvent.time),\n    droppedAttributesCount: 0,\n  };\n}\n"]}